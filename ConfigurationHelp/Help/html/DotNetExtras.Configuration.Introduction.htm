<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Introduction</title><meta name="Title" content="Introduction" /><meta name="Help.Id" content="DotNetExtras.Configuration.Introduction" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="DotNetExtras.Configuration.Introduction" /><meta name="Description" content="The DotNetExtras.Configuration library simplifies loading, reading, and transforming application configuration settings. For the detailed description of the library API, code samples, and usage scenarios, see the API documentation section." /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">DotNetExtras.Configuration Library Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><div id="HeaderPrelimContainer" class="level my-1 px-2"><div id="PreliminaryContainer" class="level-left"><div class="level-item"><span class="tag is-warning is-medium">This is preliminary documentation and is subject to change.</span></div></div></div><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Introduction</h1><div><p>
        The <em>DotNetExtras.Configuration</em> library simplifies loading, reading, and transforming application configuration settings. For the detailed description of the library API, code samples, and usage scenarios, see the <em>API documentation</em> section.
      </p></div><h2 id="Overview" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Overview</h2><div id="IDBABSection"><p>
          The <em>DotNetExtras.Configuration</em> library handles three basic cases:
        </p><ol><li><p>Loading configuration form a specific data source (dictionary variable, JSON string, JSON file). This can be useful for mocking application settings in unit tests.</p></li><li><p>Reloading application configuration settings from the original providers. Generally, once the application configuration settings are loaded from the source, they will be cashed in memory, which improves performance; however, there are cases, when an application may need to reload the configuration. For example, a long running service may need to re-read a client secret stored in the secret vault or an application safe to make sure the value is up to date. In cases like this, reloading the configuration can be useful.</p></li><li><p>Read an application configuration setting and assign its value to a strongly typed variable. Generally, application configuration values are read as strings, but because JSON-formatted application settings files can contain extended types (numbers, boolean, enums, lists, dictionaries), it can be useful to read them and directly assign to the appropriate variables.</p></li></ol><h4 id="Implementation" class="quickLinkHeader">Implementation</h4><p><em>DotNetExtras.Configuration</em> uses the 
                <a href="https://www.nuget.org/packages/microsoft.extensions.configuration/" target="_blank" rel="noopener noreferrer">Microsoft.Extensions.Configuration</a> and related libraries, so it supports the original capabilities.
              </p><h4 id="Example" class="quickLinkHeader">Example</h4><p>
               The following examples illustrate how to use the <em>DotNetExtras.Configuration</em> API:
              </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Using DotNetExtras.Configuration API</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using Microsoft.Extensions.Configuration;
using DotNetExtras.Configuration;
...
IConfiguration? config = null;

// Load configuration from a JSON file.
config = AppSettings.Load.FromJsonFile("C:\\AppSettings.json");

// Load configuration from a JSON string.
config = AppSettings.Load.FromJsonFile("{\"a\":{\"b\":\"c\"}}");

// Load configuration from a dictionary (keys of array elements must be indexed).
config = AppSettings.Load.FromDictionary(
    new Dictionary&lt;string,string?&gt;
    {
        {"A", "ValueA"},
        {"B:X", "ValueB"},
        {"C:Z:0", "ValueC"},
        {"C:Z:1", "ValueD"},
        {"C:Z:2", "ValueE"},
    }
);

// Save configuration in a static global variable.
AppSettings.Global.Set(config);

// Get configuration from the static global variable.
config = AppSettings.Global.Get();

// Reinitialize the configuration from the original provider.
AppSettings.Reload(config);

// Get a strongly-typed primitive value from the configuration.
string? a = AppSettings.GetValue&lt;string&gt;("KeyX:SubKeyA");
int? b = AppSettings.GetValue&lt;int&gt;("KeyX:SubKeyB");
bool? c = AppSettings.GetValue&lt;bool&gt;("KeyX:SubKeyC");

// Get a strongly typed collection value from the configuration.
string[]? d1 = AppSettings.GetArrayValue&lt;string[]&gt;("KeyX:SubKeyD1");
int[]? d2 = AppSettings.GetArrayValue&lt;int[]&gt;("KeyX:SubKeyD2");
List&lt;string&gt;? e1 = AppSettings.GetListValue&lt;List&lt;string&gt;&gt;("KeyX:SubKeyE1");
List&lt;int&gt;? e2 = AppSettings.GetListValue&lt;List&lt;string&gt;&gt;("KeyX:SubKeyE2");
HashSet&lt;string&gt;? f1 = AppSettings.GetHashSetValue&lt;string&gt;("KeyX:SubKeyF1");
HashSet&lt;int&gt;? f2 = AppSettings.GetHashSetValue&lt;string&gt;("KeyX:SubKeyF2");
Dictionary&lt;string, string&gt;? g1 = AppSettings.GetDictionaryValue&lt;string, string&gt;("KeyX:SubKeyG1");
Dictionary&lt;string, int&gt;? g2 = AppSettings.GetDictionaryValue&lt;string, int&gt;("KeyX:SubKeyG2");

// Get a strongly typed enum value from the configuration.
MyEnum? h = AppSettings.GetEnumValue&lt;MyEnum&gt;("KeyX:SubKeyH");</code></pre></div></div><p>             
                For the complete example and other samples covering additional scenarios, see the source code (and read the comments) of the 
                <a href="https://github.com/alekdavis/dotnet-extras-configuration/tree/main/ConfigurationTests" target="_blank" rel="noopener noreferrer">unit test project</a>.
              </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="https://www.nuget.org/packages/DotNetExtras.Configuration" target="_blank" rel="noopener noreferrer">DotNetExtras.Configuration NuGet package</a></div><div><a href="https://github.com/alekdavis/dotnet-extras-configuration" target="_blank" rel="noopener noreferrer">DotNetExtras.Configuration project repository</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Overview</a><ul class="menu"><li><a class="quickLink">Implementation</a></li><li><a class="quickLink">Example</a></li></ul></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p>Copyright © 2025 Alek Davis</p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:alek.davis%40gmail.com?Subject=DotNetExtras.Configuration%20Library%20Documentation">Alek Davis</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>